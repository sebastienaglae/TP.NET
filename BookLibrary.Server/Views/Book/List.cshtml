@{
    ViewData["Title"] = "Books";
}

@using BookLibrary.Server.Models
@using BookLibrary.Server.Extensions
@model BookLibrary.Server.ViewModels.BookResultsViewModel

<div class="card">
    <div class="card-header">
        <i class="icon-list"></i> Books
    </div>
    <div class="card-body">
        <h2 class="text-center mt-3">Welcome to Book Library</h2>
        <div class="card-header-actions m-3">
            <div class="card-header-action">
                @if (User.IsInRole(AdminRole.AddBooks))
                {
                    <a href="@Url.Action("Create", "Book")" class="btn btn-primary">
                        <i class="fa fa-plus"></i> Add a book
                    </a>
                }
            </div>
        </div>
        <div class="card-body">
            <div id="listTable">
                @await Html.PartialAsync("_ListTable", Model)
            </div>
            <div class="card-body">
                <form id="paginationForm" method="get" class="form-inline my-2 justify-content-center">
                    <label for="itemsPerPage" class="mr-2">Items per page:</label>
                    <select id="itemsPerPage" name="itemsPerPage" class="form-control">
                        @foreach (var i in new[] { 2, 5, 10, 20, 50 })
                        {
                            <option value="@i" selected=@(Model.PaginationInfo.ItemsPerPage == i)>@i</option>
                        }
                    </select>
                </form>
                <nav class="d-flex justify-content-center">
                    <ul class="pagination">
                        <li class="page-item @(Model.PaginationInfo.Page == 1 ? "disabled" : "")">
                            <a class="page-link" href="#" data-page="1" id="firstButton">First</a>
                        </li>
                        <li class="page-item @(Model.PaginationInfo.Page == 1 ? "disabled" : "")">
                            <a class="page-link" href="#" data-page="@(Model.PaginationInfo.Page - 1)" id="previousButton">Previous</a>
                        </li>
                        @for (var i = 1; i <= Model.PaginationInfo.TotalPages; i++)
                        {
                            <li class="page-item @(i == Model.PaginationInfo.Page ? "active" : "")">
                                <a class="page-link" href="#" data-page="@i" id="pageNumber">@i</a>
                            </li>
                        }
                        <li class="page-item @(Model.PaginationInfo.Page == Model.PaginationInfo.TotalPages ? "disabled" : "")">
                            <a class="page-link" href="#" data-page="@(Model.PaginationInfo.Page + 1)">Next</a>
                        </li>
                        <li class="page-item @(Model.PaginationInfo.Page == Model.PaginationInfo.TotalPages ? "disabled" : "")">
                            <a class="page-link" href="#" data-page="@Model.PaginationInfo.TotalPages">Last</a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $('#itemsPerPage').change(function () {
                $('#paginationForm').submit();
            });

            $('.pagination .page-link').click(function (e) {
                e.preventDefault();
                const page = $(this).data('page');
                $('#paginationForm').append('<input type="hidden" name="page" value="' + page + '">').submit();
            });
        });
    </script>
    <script>
        function initForm() {
            const titleSearch = document.getElementById('titleSearch');
            const authorSearch = document.getElementById('authorSearch');
            const genreSearch = document.getElementById('genreSearch');
            const itemsPerPage = document.getElementById('itemsPerPage');
            const listTable = document.getElementById('listTable');
            
            let currentTimeout = null;
            let hasCanceled = false;
            const onchange = () => {
                if (currentTimeout) {
                    clearTimeout(currentTimeout);
                }
                
                currentTimeout = setTimeout(search, 500);
                hasCanceled = true;
            };
            
            const search = () => {
                const title = titleSearch.value;
                const author = authorSearch.value;
                const genre = genreSearch.value;
                
                hasCanceled = false;
                fetch(`/Book/Search?Title=${title}&Author=${author}&Genre=${genre}&ItemsPerPage=${itemsPerPage.value}`)
                    .then(response => response.text())
                    .then(data => {
                        if (hasCanceled) {
                            return;
                        }
                        listTable.innerHTML = data;
                        
                        // change page number to 1
                        document.getElementById('pageNumber').innerText = 1;
                        // set data-page attribute to 1
                        document.getElementById('pageNumber').setAttribute('data-page', 1);
                        
                        // disable first and previous buttons
                        document.getElementById('firstButton').parentElement.classList.add('disabled');
                        document.getElementById('previousButton').parentElement.classList.add('disabled');
                        
                        // set input to filter by title, author, and genre
                        document.getElementById('titleSearch').value = title;
                        document.getElementById('authorSearch').value = author;
                        document.getElementById('genreSearch').value = genre;
                        
                        initForm();
                    });
            };
            
            titleSearch.addEventListener('input', onchange);
            authorSearch.addEventListener('input', onchange);
            genreSearch.addEventListener('input', onchange);
            itemsPerPage.addEventListener('change', onchange);
        }
        
        initForm();
        
    </script>
}